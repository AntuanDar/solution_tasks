1. Строки.

Сгенерировать случайную строку заданной длины
Посчитать кол-во слов в предложении
Посчитать кол-во вхождений символа
Кол-во вхождений каждого символа
Кол-во вхождений подстроки
Найти кол-во полиндромов в предложении и вывести их
Найти какие символы встречаются чаще всего
Развернуть строку
Развернуть слова в предложении
Схлопнуть повторяющиеся символы
Посчитать количество строк в тексте
Перенести каждое предложение на новую строку с отстуом 4 пробела
Перевести русский текст в транслит
Скорректировать регистр у ФИО + вывести инициалы (иванов ИВАН иВаНович -> Иванов Иван Иванович, Иванов И.И.)
Отсортировать слова в строке по алфавиту, вывести в строку и в столбец

Реализовать простой консольный калькулятор (без скобок, операции: +,-,*,/,степень,логирифм,факториал)
Добавить в текст отступы с каждой новой строки 4 пробела
Процентное соотношение вхождений всех символов псевдографикой:
       -
       -
       -      -
-      -      -
-      -      -
a(20%) b(50%) c(30%)

Кол-во вхождений каждого слова
Процентное соотношение вхождений всех слов псевдографикой:
  -
- -
- -
в на

Автоперенос слов на новую строку по заданной максимальной ширине строки

---------------------------------------------------------------------------

2. Регулярные выражения

Проверить, что введенная строка является положительным числом
- целым числом
- десятичным числом
- комплексным числом
- валидным IP-адресом.
- валидным MAC-адресом.
- валидным GUID (e02fd0e4-00fd-090A-ca30-0d00a0038ba0).
Определить степень надежности пароля (цифры, большие и маленькие буквы - надежный, 2 из 3 - слабый, иначе - ненадежный)

Убрать повторяющиеся пробелы
Проверить парность скобок в тексте
Найти сумму всех рациональных чисел в предложении
Найти сумму цифр каждого рационального числа в предложении
Обернуть в квадратные скобки все числа в предложении
Распарсить ax^2+b*x+c, вывести коэффициенты, найти корни
---------------------------------------------------------------------------день 3
Сократить все слова в предложении, оставив первую и последнюю буквы через дефис
Выделить тегом <strong> все повторяющиеся слова.
Распарсить форматированную дату (HHmmss, ddMMyy, yyyyMMddHHmmss)
Форматировать текущую дату (HHmmss, ddMMyy, yyyyMMddHHmmss)
Заменить в строке шаблон $DATE{ddMMyyyy} на текущую дату в соответствующем формате

Преобразовать текст, обрамленный в звездочки, в курсив (<i></i>), двойные звездочки - жирный (<b></b>)
Преобразовать Markdown список в html
Найти и выделить жирным (<b></b>) повтряющиеся пункты в html-списке.
Распарсить мапу по формату "KEY1=VAL1\nKEY2=VAL2"
Распарсить высокоуровневый astm, достать результаты
---------------------------------------------------------------------------день 4-5

3. Коллекции, дженерики

Разбить текст на строки и положить в список
Отсортировать список пузырьком
Реализовать метод сравнения списков с элементами одинакового типа, метод должен возвращать процент схожести
Найти пересечение двух коллекций с элементами одинакового типа
Реализовать метод приведения коллекции к типу с дженериком с проверкой типов элементов: Collection -> Collection<T>
Реализовать универсальный конвертер типов с возможностью добавления пользовательских:
- void addSupportedType(Class<T> type, Function<Object, T> convert) - регистрация функции конвертации для типа type
- T convert(Object value, Class<T> type) - конвертация объекта value в тип type, должна использовать функцию конвертации, зарегистрированную для type
- функции конвертации для часто используемых типов (Integer, String, Boolean) должны быть уже зарегистрированы

Реализовать мапу объектов с методами получения значения требуемого типа - getInt, getString, getDouble, getBool - методы должны не просто кастовать объекты, а преобразовывать их к нужному типу, если это возможно, или выкидывать исключение
Реализовать мапу списков - ListMap<K, V>, K - тип ключа, V - тип элементов списка
Реализовать список MegaList на основе ArrayList с возможностью:
- фильтрации - void filter( <предикат> ) { ... }
- получения нового отфильтрованного списка MegaList filter( <предикат> ) { ... }
- обхода - void visit( <посетитель>)
- отслеживания изменений списка
Реализовать бинарное дерево BinTree, в листьях которого хранятся произвольные объекты, в виде коллекции с дженериком, с возможностью:
- обхода - void visit( <посетитель>)
- поиска по строковому представлению объектов в листьях - BinTreeNode find( <подстрока> ) { ... }
- фильтрации - void filter( <предикат> ) { ... }
- отслеживания изменений

---------------------------------------------------------------------------день 6

4. Файлы

Вывести список файлов с размерами в заданной папке
Посчитать размер папки, количество вложенных файлов и папок, максимальный уровень вложенности
Вывести дерево файлов с корнем в заданной папке
Удалить файлы по маске имени (регулярка)
Скопировать файлы по маске имени
Разбить текстовый файл на несколько файлов:
- по 10 строк
- по пустым строкам
- по 1Мб, не разрывая строк
Распаковать/запаковать zip с логгированием обрабатываемых файлов (путь файла в архиве, куда распакован)
Разбить файлы в заданной папке на группы по дню создания и упаковать в архивы 20180730.zip, 20180729.zip, ...
Распаковать все архивы из заданной папки (srcDir) и ее подпапок, положить распакованные файлы в отдельную папку (destDir)
Перекодировать файл из UTF-8 в Cp1251
Снять снимок экрана, сохранить в png
Запустить внешний процесс (bat, explorer, chrome):
- запустить батник
- выделить заданный файл, открыв его папку в explorer
- открыть ссылку в chrome
Реализовать логгер:
- сообщения должны содержать дату и время с миллисекундами, уровень (INFO/WARNING/ERROR) и текст сообщения
- сообщения пишутся в файл с именем "yyyyMMdd.log"
- когда файлы логов начинают занимать больше 5Мб, упаковывать их в zip с именем <мин.дата файла>-<макс.дата файла>
Реализовать grep, который просматривает текст из файла и на выходе показывает лишь те строки, которые содержат подстроку, передаваемую на вход
- вывести путь файла, номер строки и саму строку
- на вход может быть передано регулярное выражение
- на вход может быть передана папка, нужно просмотреть таким же образом все файлы из нее и всех подпапок
Реализовать сериализуемую мапу с форматом "KEY1=VAL1\nKEY2=:VAL2:VAL3:":
- файл задается в конструкторе
- методы load/save должны работать через ObjectOutputStream/ObjectInputStream
- если значение содержит ':', то это список
- при отключении клиента, ждать нового подключения

---------------------------------------------------------------------------день 10

7. Потоки

Запустить несколько потоков с простыми счетчиками и выводом на экран текущего значения счетчика с заданным интервалом
Реализовать класс потока, выводящего на экран заданный символ каждую секунду заданное количество раз
Добавить метод завершения потока
Запустить потоки в соответствии с графом (при изменении длины потока f должна меняться длина b):
acacadadeeeeefbfb...fbxxx
Реализовать пул объектов (для простоты это может быть простой класс инкапсулирующий строку):
- размер передается в конструктор
- при запросе объекта из пула, он помечается, как занятный и не может быть больше запрошен
- при возврате объекта в пул он освобождается и может быть снова отдан в ответ на запрос
- если свободных объектов нет, запрос должен ждать, пока освободится хотя бы один объект
- если во время ожидания приходит еще один запрос, он становится в очередь и не должен получить объект раньше первого запроса
- запустить несколько потоков, которые рандомно берут объекты из пула выводят их содержимое

---------------------------------------------------------------------------день 7-8

5. Сеть

Реализовать простой сервер, слушающий порт и принимающий от клиента сообщения
- установить соединение с клиентом
- вывести адрес клиента
- принять от клиента сообщение и вывести в консоль ("10.0.0.146: Сообщение")

Реализовать серверную часть для чата:
- сервер слушает диапазон портов
- установить соединение с клиентом
- вывести адрес клиента
- принять от клиента команду im "Andrew" и сменить имя пользователя
- принять от клиента сообщение и вывести ("Andrew: Сообщение")
- команда im "Andrew" может быть вызвана пользователем в любое время
- при отключении клиента, ждать нового подключения на этом порту

Реализовать простой обмен с анализатором:
    <STX><Message1><ETX>               <STX><Message1><ETX>               <STX><Message2><EOT>
                        <STX><NAK><ETX>                    <STX><ACK><ETX>                    <STX><ACK><ETX>
Реализовать обмен и парсинг результатов с Minicap

Передать сообщение по транспортному протоколу astm от клиента к серверу и наоборот
    <ENQ>     <Frame1>     <Frame1>     <Frame2>     <EOT>
         <ACK>        <NAK>        <ACK>        <ACK>
Реализовать обмен и парсинг результатов с Bactec960

---------------------------------------------------------------------------день 9

6. БД

man - таблица с пользователями системы и группами пользователей
man.man_type - тип записи: null/0=группа пользователей, 1=пользователь
man.status - статус пользователя/группы: null/0=деактивирован, 1=активный

Достать из БД количество пользователей, вывести в консоль
Достать из БД всех пользователей, вывести в консоль
Достать из БД только активные группы пользователей, вывести в консоль

Достать все то же самое с помощью пакета pkg_java_tasks:
- function pkg_java_tasks.get_man_count(p_status number
                                       ,p_man_type in number) return number;
-- p_status - null=все записи, 0=только неактивные, 1=только активные
- procedure pkg_java_tasks.select_man(p_status in number
                                     ,p_man_type in number
                                     ,p_rc in out pkg_global.ref_cursor_type);
-- p_status - null=все записи, 0=только неактивные, 1=только активные
-- p_man_type - null=все записи, 0=только группы, 1=только пользователи
-- p_rc - курсор, выходной параметр

Реализовать обертку на jdbc для удобного выхова запросов:
- класс Query:
-- Query(Connection conn, String sql)
-- ResultSet select()
-- void update()
- класс BaseDao:
-- BaseDao(Connection conn)
-- T select(String sql, Map<String, Object> params, Function<ResultSet, T> dataExtractor)
-- T selectList(String sql, Map<String, Object> params, Function<ResultSet, T> dataExtractor)
-- void update(String sql, Map<String, Object> params)

Реализовать класс ManDao, использующий обертку BaseDao:
- getUserCount(Integer status)
- getGroupCount(Integer status)
- getAllUsers(Integer status)
- getAllGroups(Integer status)

Достать структуру таблицы из метаданных (ResultSetMetaData): названия колонок, их типы данных
Достать содержимое таблицы man, вывести в консоль с заголовками колонок
Реализовать консольный интерфейс для выполнения запросов к БД (select,insert,delete,update,call)
Восстановить скрипт создания таблицы (только колонки)
Создать таблицу java_tasks_instrument_result для результатов исследований на анализаторах:
- id number(12) - идентификатор записи, первичный ключ
- ids varchar2(24) - идентификатор биоматериала
- measure_code varchar2(32) - код измерения
- measure_value varchar2(32) - полученное значение измерения
- measure_date date - дата измерения
Реализовать интерфейс LabResultsDao extends BaseDao:
- saveInstrumentResult(String ids, String msr, String value, Date date) - запись результата в instrument_result
- прикрутить к парсеру экспорт результатов в БД с помощью LabResultsDao

---------------------------------------------------------------------------

9. Swing

Генерируется рандомное число [0;100] и пользователю предлагается 7 попыток отгадать, при каждой попытке выводится сообщение - "Мало", "Много" или "В точку":
- JFrame - главное окно приложения
- JTextField для ввода числа (можно вводить только числа от 1 до 100)
- JLabel с сообщением "Мало"/"Много"/"В точку"
- JLabel с количеством оставшихся попыток
- JButton для подтверждения ввода (также должно работать по ENTER в текстовом поле)
- JOptionPane.showConfirmDialog с предложением начать заново в конце игры

Реализовать панель с отрисовкой графиков функций - класс GraphPanel extends JPanel:
- возможность задать одну или несколько отображаемый функций
- возможность задать цвет графика каждой отображаемой функции (по умолчанию - черный)
- возможность задать диапазон графика каждой отображаемой функции (по умолчанию [-10;10] по обеим осям)

Реализовать ColorChooserLabel extends JLabel:
- при клике открывает JColorChooser для выбора цыета
- заливается выбранным цветом (изначально черный)
- отображает код выбранного цвета (#FFFFFF)
- tooltip = "Hex:[FF, FF, FF]\nDec:[255, 255, 255]"

Построить на одной панели графики функций y=ax+b, y=x^2, y=1/x, y=a с возможностью настройки трех параметров каждой из них:
- JFrame - главное окно приложения
- GraphPanel - панель с графиками
- JComboBox - выбор графика (Все, y=ax+b, y=x^2, y=1/x, y=a), если выбран один, остальные графики скрываются
- ColorChooserLabel меняет цвет выбранного графика
- JTextField для ввода диапазона выбранного графика

Подсветка скобок в документе:
- JFrame - главное окно приложения
- JTextPane для отображения документа
- JScrollPane для прокрутки
- моноширинный шрифт
- при установке курсора слева от скобки подсвечивается жирным синим шрифтом она и парная ей
- скобки круглые, фигурные, квадратные, треугольные
- если курсор внутри скобок, то серым фоном выделяется все выражение в скобках
- если в документе обнаружены непарные скобки, они выделяются красным подчеркиванием

Вывести пользователей из таблицы MAN (CODE, TEXT, STATUS, NOTE):
- JFrame - главное окно приложения
- JTable для вывода данных
- JScrollPane для прокрутки
добавить тулбар с кнопками Создать, Удалить, Изменить
добавить диалог создания/редактирования записи по кнопке Создать/Изменить:
- JDialog, заголовок - Создание пользователя/Редактирование пользователя Иванов Иван Иванович
- JTextField для колонок CODE, TEXT
- JPasswordField для колонки PASS
- дублирующее поле для подтверждения пароля
- JCheckBox для колонки STATUS

---------------------------------------------------------------------------

10. Разработка приложения

Реализовать картотеку пациентов с возможностью поиска в виде десктопного приложения на Java.

Таблица java_tasks_patient должна содержать следующие колонки (* - обязательные):
*id NUMBER(12) - идентификатор записи
*fio VARCHAR2(256) - ФИО пациента полностью, например "Иванов Иван Иванович"
 birth_date DATE - дата рождения
 sex NUMBER(1) - пол (1=муж, 2=жен)
*num NUMBER(6) - номер карты
 smo VARCHAR2(256) - название страховой компании
 snils VARCHAR2(11)- номер СНИЛС без дефисов (12345678964)
 policy VARCHAR2(20)- номер полиса
 fin_source - источник финансирования (1=ОМС, 2=ДМС, 3=Наличный расчет)

Таблица в интерфейсе должна содержать следующие колонки:
Номер - номер карты
СНИЛС - номер снилс с дефисами (123-456-789-64)
Пол - пол пациента текстом (Муж/Жен)
ФИО - фамилия и инициалы пациента, например "Иванов И.И.", tooltip="Иванов Иван Иванович"
Дата рожд. - дата рождения в формате dd.MM.yyyy
Возраст - возраст пациента текстом, например "29 лет" или "32 года"
Полис - название СМО и номер полиса в одной колонке через дефис, например "РЕСО - 123456"
Ист.фин. - иконка соответствующего источника финансирования (картинки любые)

Другие требования к таблице:
- текст в колонке ФИО выделить жирным шрифтом
- подсветить каждую строки в зависимости от пола пациента, если он заполнен (Муж - голубым, Жен - розовым)
- tooltip в колонке Ист.фин. = "ОМС"/"ДМС"/"Нал" в зависимости от значения в ячейке

Требования к функции поиска:
- на форме должно быть текстовое поле
- при нажатии на кнопку Поиск или ENTER в текстовом поле строки в таблице должны фильтроваться в зависимости от текста
- текст в поле разбивается на слова, запись считается подходящей под критерии, если хотя бы одно слово в колонках содержит хотя бы одно искомое слово
- при нажатии на кнопку Очистить или ESCAPE в текстовом поле, поле поиска должно очищаться, а таблица возвращаться в исходное состояние

Классы должны быть разбиты на основные пакеты:
- ru.spb.reshenie.javatasks.ui (классы окон и компонентов, обращения к БД только через dao)
- ru.spb.reshenie.javatasks.db (классы для работы с базой)
- ru.spb.reshenie.javatasks.entity (бины, не должны содержать никакой логики)
- ru.spb.reshenie.javatasks.utils (утилитные классы)
Приложение должно принимать адрес БД в виде аргумента командной строки - "/url 10.0.0.199:1521:etalon"

Стек:
- IntelliJ IDEA
- Java <= 1.8
- интерфейс на Swing (по желанию можно воспользоваться IDEA UI Designer)
- чистый JDBC, без использования фреймворков (можно пользоваться обертками Query, BaseDao из предыдущих заданий)
- БД - Oracle

Результат выполнения задания:
проект IntelliJ IDEA с исходниками
скомпилированный jar
батник, запускающий приложение

